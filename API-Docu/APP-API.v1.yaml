openapi: 3.0.0
info:
  title: APP-API
  version: '1.0'
  contact:
    email: bylukee1@gmail.com
    name: Lukas KÃ¶nig
  description: API for communication between the MRAS WebApp/App and the Server
servers:
  - url: 'http://localhost:3000/api/v1'
paths:
  /register:
    parameters: []
    post:
      summary: Register User
      operationId: register
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                required:
                  - token
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
                required:
                  - error
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
                required:
                  - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  description: sha-256 hashed password
              required:
                - username
                - password
      security: []
  /login:
    post:
      summary: Login User
      operationId: login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  description: sha-256 hashed password
              required:
                - username
                - password
      security: []
    parameters: []
  /user/privileges:
    parameters: []
    put:
      summary: Update User Privileges
      operationId: updateUserPrivilages
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: integer
                privileges:
                  $ref: '#/components/schemas/UserPrivileges'
              required:
                - userid
                - privileges
      description: Updates user privileges
  /user/getall:
    get:
      summary: Get List of all Users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        userid:
                          type: integer
                        username:
                          type: string
              examples: {}
      operationId: getAllUsers
    parameters: []
  /room/create:
    parameters: []
    post:
      summary: Create a new Room
      operationId: createRoom
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/User'
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                desciption:
                  type: string
                dimensions:
                  type: object
                  properties:
                    hieght:
                      type: number
                    width:
                      type: number
            examples:
              example-1:
                value: {}
  /room/getall:
    get:
      summary: Get all Rooms
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      operationId: getAllRooms
    parameters: []
  '/room/get/{id}':
    get:
      summary: Get Specific Room by ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      operationId: getRoom
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/user/get/{id}':
    get:
      summary: Get specific User by ID
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
      operationId: getUser
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  /speaker/create:
    parameters: []
    put:
      summary: ''
      operationId: put-speaker-create
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                '':
                  $ref: '#/components/schemas/Speaker'
    post:
      summary: ''
      operationId: post-speaker-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  speaker:
                    $ref: '#/components/schemas/Speaker'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                speaker:
                  $ref: '#/components/schemas/Speaker'
components:
  schemas:
    Room:
      title: Room
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        dimensions:
          type: object
          description: not used yet
          properties:
            height:
              type: number
            width:
              type: number
    Speaker:
      title: Speaker
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        position:
          type: object
          description: not used yet
          properties:
            x:
              type: number
            'y':
              type: number
        roomid:
          type: integer
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
    Error:
      title: Error
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    UserPrivileges:
      title: UserPrivileges
      type: object
      properties:
        admin:
          type: boolean
        canedit:
          type: boolean
        speakers:
          type: array
          items:
            $ref: '#/components/schemas/Speaker'
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: ''
security:
  - Bearer: []
